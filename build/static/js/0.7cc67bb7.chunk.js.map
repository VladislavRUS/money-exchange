{"version":3,"sources":["utils/formatMoneyInLocale.ts","utils/getAccountSymbol.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/RoundedLink/RoundedLink.styles.ts","components/RoundedLink/RoundedLink.tsx","components/RoundedLink/index.ts","views/Exchange/Exchange.styles.ts","components/Buttons/BaseButton/BaseButton.styles.ts","components/Buttons/BaseButton/BaseButton.tsx","components/Buttons/AnimatedRoundedButton/AnimatedRoundedButton.styles.ts","components/Buttons/AnimatedRoundedButton/AnimatedRoundedButton.tsx","views/Exchange/BaseExchange/BaseExchange.styles.ts","components/RegularInput/RegularInput.styles.ts","views/Exchange/BaseExchange/BaseExchange.tsx","components/RegularInput/RegularInput.tsx","views/Exchange/ExchangeFrom/ExchangeFrom.tsx","views/Exchange/ExchangeTo/ExchangeTo.tsx","components/Buttons/RegularTextButton/RegularTextButton.styles.ts","components/Buttons/RegularButton/RegularButton.styles.ts","components/Buttons/RegularButton/RegularButton.tsx","components/Buttons/RegularTextButton/RegularTextButton.tsx","views/Exchange/ExchangeModal/ExchangeModal.styles.ts","components/Modal/Modal.styles.ts","components/Modal/Modal.tsx","views/Exchange/ExchangeModal/ExchangeModal.tsx","components/ScreenHolder/ScreenHolder.styles.ts","components/ScreenHolder/ScreenHolder.tsx","views/Exchange/ExchangedScreenHolder/ExchangedScreenHolder.styles.ts","views/Exchange/ExchangedScreenHolder/ExchangedScreenHolder.tsx","views/Exchange/Exchange.tsx","views/Exchange/index.ts"],"names":["formatValueInLocale","locale","value","Intl","NumberFormat","useGrouping","minimumFractionDigits","maximumFractionDigits","format","getAccountSymbol","account","currencies","currency","symbol","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","TypeError","RoundedLinkLook","StyledLink","styled","NavLink","LinkContent","div","props","look","SUCCESS","css","RoundedLink","to","DEFAULT","children","Wrapper","Overlay","Title","h2","ReverseButtonWrapper","CloseWrapper","ContinueButtonWrapper","BaseButtonLook","StyledButton","button","showBorder","isDisabled","RegularButton","onClick","ANIMATION_DURATION_MS","rotationAnimation","keyframes","AnimatedRoundedButton","state","isAnimating","setState","setTimeout","this","className","BaseButton","React","Component","mode","BaseExchangeMode","TO","SelectWrapper","ExchangeContentWrapper","Sign","Currency","label","ExchangeInput","input","ExchangeInputWrapper","fontSize","asPlaceholder","CurrentRate","RateTitle","RateValue","Placeholder","isFocused","BottomLine","StyledInput","RegularInput","onChange","event","onChangeText","currentTarget","onFocus","onBlur","placeholder","icon","forwardRef","ref","Boolean","WithForwardRef","MAX_VALUE","BaseExchange","caretStart","exchangeInputRef","getTitleFromAccount","title","onOpenSelect","isSelectOpened","onCloseSelect","searchStr","changedSearch","onClickOutside","onKeyDown","key","selectionStart","selectionEnd","setSelectionRange","preventDefault","test","parsedValue","parseFloat","replace","onChangeValue","onChangeSearch","renderContent","accounts","toLowerCase","filteredAccounts","filter","indexOf","Fragment","map","Select","TextItem","text","onSelectAccount","onSetBaseAccount","id","handleExchangeInputRef","element","prevProps","position","getCaretPosition","slice","split","baseAccount","FROM","t","inputValue","currencySymbol","content","isOpened","width","htmlFor","size","currentRate","fromAccount","toAccount","rates","fromAccountSymbol","toAccountSymbol","toValue","convertBetweenCurrencies","i18n","language","fromValue","translated","withTranslation","connect","list","exchange","data","ConnectedExchangeFrom","getFormattedFromValue","dispatch","bindActionCreators","changeFromValue","changeFromAccount","setBaseAccount","ConnectedExchangeTo","getFormattedToValue","changeToValue","changeToAccount","Text","RegularTextButton","Header","Information","InformationRow","From","To","Total","Value","FromValue","ToValue","Subtitle","CommentInputWrapper","CornerIconWrapper","ExchangeButtonWrapper","TotalWrapper","Amount","Rate","fadeIn","slideIn","ContentWrapper","Content","CloseIconWrapper","Modal","onRequestClose","externalContent","ExchangeModal","renderExchangeButton","isLoading","comment","setComment","reverse","fromAccountTitle","getAccountTitle","toAccountTitle","fromAccountCurrencySymbol","toAccountCurrencySymbol","formattedFromValue","formattedToValue","rate","color","transactions","ScreenHolder","isVisible","GotButtonWrapper","CheckIconWrapper","Summary","Top","Bottom","ExchangedScreenHolder","onGot","clearExchange","history","Routes","ACCOUNTS","transaction","hasExchanged","fromAccountValue","toAccountValue","find","fromAccountId","toAccountId","ConnectedScreenProps","lastTransaction","setHasExchanged","withRouter","Exchange","onModalOpen","setExchangeModalVisibility","onModalClose","first","second","setFromAccount","setToAccount","isContinueAvailable","isExchangeModalVisible","HOME","ConnectedExchange"],"mappings":"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","file":"static/js/0.7cc67bb7.chunk.js","sourcesContent":["export const formatValueInLocale = (locale: string, value: number) =>\n  new Intl.NumberFormat(locale, {\n    useGrouping: true,\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2,\n  }).format(value);\n","import { ICurrenciesData } from '../store/currencies/types';\nimport { IAccount } from '../store/accounts/types';\n\nexport const getAccountSymbol = (account: IAccount, currencies: ICurrenciesData) => {\n  return currencies[account.currency].symbol;\n};\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import styled, { css } from 'styled-components';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { RoundedLinkLook } from './RoundedLink';\r\n\r\nexport const StyledLink = styled(NavLink)`\r\n  text-transform: none;\r\n`;\r\n\r\nexport const LinkContent = styled.div<{ look: RoundedLinkLook }>`\r\n  height: 56px;\r\n  width: 56px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: 50%;\r\n  background-color: #fff;\r\n  box-shadow: 0 5px 15px -2px rgba(0, 0, 0, 0.15);\r\n\r\n  ${props =>\r\n    props.look === RoundedLinkLook.SUCCESS &&\r\n    css`\r\n      background-color: rgb(235, 0, 141);\r\n    `};\r\n`;\r\n","import React from 'react';\r\nimport { StyledLink, LinkContent } from './RoundedLink.styles';\r\n\r\nexport enum RoundedLinkLook {\r\n  SUCCESS,\r\n  DEFAULT,\r\n}\r\n\r\ninterface IRoundedLinkProps {\r\n  to: string;\r\n  look?: RoundedLinkLook;\r\n}\r\n\r\nconst RoundedLink: React.FC<IRoundedLinkProps> = ({ to, look = RoundedLinkLook.DEFAULT, children }) => (\r\n  <StyledLink to={to}>\r\n    <LinkContent look={look}>{children}</LinkContent>\r\n  </StyledLink>\r\n);\r\n\r\nexport default RoundedLink;\r\n","import RoundedLink, { RoundedLinkLook } from './RoundedLink';\r\n\r\nexport { RoundedLink, RoundedLinkLook };\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  position: relative;\r\n  height: 100%;\r\n  display: flex;\r\n`;\r\n\r\nexport const Overlay = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  height: 100px;\r\n  background: linear-gradient(#fff, transparent);\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n  position: absolute;\r\n  top: 50px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  text-align: center;\r\n  color: #191c1e;\r\n  font-size: 32px;\r\n`;\r\n\r\nexport const ReverseButtonWrapper = styled.div`\r\n  position: absolute;\r\n  top: 150px;\r\n  left: 50%;\r\n  transform: translateX(-50%) rotate(45deg);\r\n`;\r\n\r\nexport const CloseWrapper = styled.div`\r\n  position: absolute;\r\n  top: 25px;\r\n  right: 50px;\r\n`;\r\n\r\nexport const ContinueButtonWrapper = styled.div`\r\n  position: absolute;\r\n  left: 50%;\r\n  bottom: 30px;\r\n  transform: translateX(-50%);\r\n  width: 350px;\r\n`;\r\n\r\nexport const ScreenHolderContent = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n","import styled, { css } from 'styled-components';\r\nimport { BaseButtonLook } from './BaseButton';\r\n\r\nexport const StyledButton = styled.button<{ isDisabled: boolean; look: BaseButtonLook; showBorder: boolean }>`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 0;\r\n  height: 56px;\r\n  width: 100%;\r\n  border-radius: 32px;\r\n  cursor: pointer;\r\n  border: ${props => (props.showBorder ? '1px solid rgb(206, 213, 219)' : 'none')};\r\n  transition: background-color .2s ease;\r\n  \r\n  ${props =>\r\n    props.look === BaseButtonLook.DEFAULT &&\r\n    css`\r\n      background-color: #fff;\r\n\r\n      &:active {\r\n        background-color: #d8d8d8;\r\n      }\r\n    `}\r\n    \r\n  ${props =>\r\n    props.look === BaseButtonLook.SUCCESS &&\r\n    css`\r\n      background-color: rgb(235, 0, 141);\r\n      box-shadow: 0 5px 10px -2px rgb(235, 0, 141);\r\n\r\n      &:active {\r\n        background-color: rgb(198, 0, 115);\r\n      }\r\n    `}\r\n\r\n  ${props =>\r\n    props.isDisabled &&\r\n    css`\r\n      pointer-events: none;\r\n      opacity: 0.5;\r\n    `}\r\n`;\r\n","import React from 'react';\r\nimport { StyledButton } from './BaseButton.styles';\r\n\r\nexport enum BaseButtonLook {\r\n  SUCCESS,\r\n  DEFAULT,\r\n}\r\n\r\ninterface IBaseButtonProps {\r\n  onClick: () => void;\r\n  isDisabled?: boolean;\r\n  look?: BaseButtonLook;\r\n  showBorder?: boolean;\r\n}\r\n\r\nexport const RegularButton: React.FC<IBaseButtonProps> = ({\r\n  children,\r\n  isDisabled = false,\r\n  onClick,\r\n  look = BaseButtonLook.DEFAULT,\r\n  showBorder = false,\r\n}) => (\r\n  <StyledButton isDisabled={isDisabled} onClick={onClick} look={look} showBorder={showBorder}>\r\n    {children}\r\n  </StyledButton>\r\n);\r\n\r\nexport default RegularButton;\r\n","import styled, { keyframes } from 'styled-components';\r\n\r\nexport const ANIMATION_DURATION_MS = 350;\r\n\r\nconst rotationAnimation = keyframes`\r\n  0% {\r\n    transform: rotate(0);\r\n  }\r\n  \r\n  100% {\r\n    transform: rotate(180deg);\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  width: 56px;\r\n  border-radius: 50%;\r\n  box-shadow: 0 0 15px -2px rgba(0, 0, 0, 0.15);\r\n\r\n  &:hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  &.animating {\r\n    animation: ${rotationAnimation} ${ANIMATION_DURATION_MS}ms ease;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { BaseButton } from '../BaseButton';\r\nimport { ANIMATION_DURATION_MS, Wrapper } from './AnimatedRoundedButton.styles';\r\n\r\ntype TBaseButtonProps = React.ComponentProps<typeof BaseButton>;\r\ntype TState = {\r\n  isAnimating: boolean;\r\n};\r\n\r\nclass AnimatedRoundedButton extends React.Component<TBaseButtonProps, TState> {\r\n  constructor(props: TBaseButtonProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isAnimating: false,\r\n    };\r\n  }\r\n\r\n  onClick = () => {\r\n    if (this.state.isAnimating) {\r\n      return;\r\n    }\r\n\r\n    const { onClick } = this.props;\r\n    onClick();\r\n\r\n    this.setState({ isAnimating: true }, () => {\r\n      setTimeout(() => {\r\n        this.setState({ isAnimating: false });\r\n      }, ANIMATION_DURATION_MS);\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { children, ...props } = this.props;\r\n\r\n    return (\r\n      <Wrapper className={this.state.isAnimating ? 'animating' : ''}>\r\n        <BaseButton {...props} onClick={this.onClick}>\r\n          {children}\r\n        </BaseButton>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AnimatedRoundedButton;\r\n","import styled, { css } from 'styled-components';\r\nimport { BaseExchangeMode } from './BaseExchange';\r\n\r\nexport const Wrapper = styled.div<{ mode: BaseExchangeMode }>`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding-top: 150px;\r\n\r\n  ${props =>\r\n    props.mode === BaseExchangeMode.TO &&\r\n    css`\r\n      background-color: #f7f7f7;\r\n    `}\r\n`;\r\n\r\nexport const SelectWrapper = styled.div`\r\n  margin-top: 10px;\r\n  width: 100%;\r\n  max-width: 416px;\r\n`;\r\n\r\nexport const ExchangeContentWrapper = styled.div`\r\n  position: relative;\r\n  flex-grow: 1;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Sign = styled.div`\r\n  margin-right: 5px;\r\n`;\r\n\r\nexport const Currency = styled.label`\r\n  display: block;\r\n  padding-right: 5px;\r\n  cursor: text;\r\n`;\r\n\r\nexport const ExchangeInput = styled.input`\r\n  display: inline-block;\r\n  flex-shrink: 1;\r\n  border: none;\r\n  font-size: inherit;\r\n  font-weight: inherit;\r\n  background-color: transparent;\r\n\r\n  &::placeholder {\r\n    color: #ced5db;\r\n  }\r\n`;\r\n\r\nexport const ExchangeInputWrapper = styled.div<{ asPlaceholder: boolean; fontSize: number }>`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: ${props => props.fontSize}rem;\r\n  font-weight: 300;\r\n\r\n  ${props =>\r\n    props.asPlaceholder &&\r\n    css`\r\n      ${Sign}, ${Currency} {\r\n        color: #ced5db;\r\n      }\r\n    `}\r\n`;\r\n\r\nexport const CurrentRate = styled.div`\r\n  position: absolute;\r\n  bottom: 12vh;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  color: rgb(139, 149, 158);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n`;\r\n\r\nexport const RateTitle = styled.div`\r\n  margin-bottom: 5px;\r\n`;\r\n\r\nexport const RateValue = styled.div``;\r\n","import styled, { css } from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  position: relative;\r\n  height: 45px;\r\n  padding-top: 9px;\r\n  display: flex;\r\n  align-items: center;\r\n  border-bottom: 1px solid rgb(206, 213, 219);\r\n`;\r\n\r\nexport const Placeholder = styled.div<{ isFocused: boolean }>`\r\n  top: 50%;\r\n  position: absolute;\r\n  color: #8b959e;\r\n  font-size: 16px;\r\n  transform: translateY(0px);\r\n  transition: transform 0.2s ease;\r\n\r\n  ${props =>\r\n    props.isFocused &&\r\n    css`\r\n      transform: translate(-8px, -23px) scale(0.8);\r\n    `}\r\n`;\r\n\r\nexport const BottomLine = styled.div<{ isFocused: boolean }>`\r\n  position: absolute;\r\n  bottom: -1px;\r\n  height: 2px;\r\n  left: 0;\r\n  width: 100%;\r\n  transform: scaleX(0);\r\n  background-color: rgb(0, 117, 235);\r\n  transition: transform 0.2s ease;\r\n  transform-origin: 0 50%;\r\n\r\n  ${props =>\r\n    props.isFocused &&\r\n    css`\r\n      transform: scale(1);\r\n    `}\r\n`;\r\n\r\nexport const StyledInput = styled.input`\r\n  font-size: 16px;\r\n  width: 100%;\r\n  border: none;\r\n  background-color: transparent;\r\n`;\r\n","import React from 'react';\r\nimport {\r\n  Wrapper,\r\n  SelectWrapper,\r\n  ExchangeInput,\r\n  ExchangeInputWrapper,\r\n  Currency,\r\n  Sign,\r\n  ExchangeContentWrapper,\r\n  CurrentRate,\r\n  RateTitle,\r\n  RateValue,\r\n} from './BaseExchange.styles';\r\nimport { IAccount } from '../../../store/accounts/types';\r\nimport { RegularInput } from '../../../components/RegularInput';\r\nimport { Select } from '../../../components/Select';\r\nimport { IApplicationState } from '../../../store';\r\nimport { connect } from 'react-redux';\r\nimport { withTranslation, WithTranslation } from 'react-i18next';\r\nimport { convertBetweenCurrencies } from '../../../utils/covertBetweenCurrencies';\r\nimport { formatValueInLocale } from '../../../utils/formatMoneyInLocale';\r\nimport { i18n } from '../../../i18n';\r\n\r\nconst MAX_VALUE = 1000000000;\r\n\r\nexport enum BaseExchangeMode {\r\n  FROM = 'exchange-from',\r\n  TO = 'exchange-to',\r\n}\r\n\r\ninterface IBaseExchangeProps {\r\n  mode?: BaseExchangeMode;\r\n  placeholder?: string;\r\n  account: IAccount;\r\n  value: string;\r\n  onChangeValue: (value: number) => void;\r\n  onSelectAccount: (account: IAccount) => void;\r\n  onSetBaseAccount: (account: IAccount) => void;\r\n}\r\n\r\nconst mapStateToProps = (state: IApplicationState) => ({\r\n  accounts: state.accounts.list,\r\n  baseAccount: state.exchange.baseAccount,\r\n  currencies: state.currencies.data,\r\n  fromAccount: state.exchange.fromAccount,\r\n  toAccount: state.exchange.toAccount,\r\n  rates: state.rates.rates,\r\n});\r\n\r\ntype TStateProps = ReturnType<typeof mapStateToProps>;\r\n\r\ntype TProps = TStateProps & IBaseExchangeProps & WithTranslation;\r\n\r\ntype TState = {\r\n  isSelectOpened: boolean;\r\n  searchStr: string;\r\n  changedSearch: boolean;\r\n};\r\n\r\nclass BaseExchange extends React.Component<TProps, TState> {\r\n  caretStart: number | null = null;\r\n  exchangeInputRef: any = null;\r\n\r\n  constructor(props: TProps) {\r\n    super(props);\r\n    this.state = {\r\n      isSelectOpened: false,\r\n      changedSearch: false,\r\n      searchStr: this.getTitleFromAccount(this.props.account),\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Readonly<TProps>): void {\r\n    if (prevProps.account !== this.props.account) {\r\n      this.setState({ searchStr: this.getTitleFromAccount(this.props.account) });\r\n    }\r\n\r\n    if (prevProps.value !== this.props.value && this.exchangeInputRef && this.caretStart) {\r\n      const position = this.getCaretPosition(this.props.value, this.caretStart);\r\n      this.exchangeInputRef.setSelectionRange(position, position);\r\n    }\r\n  }\r\n\r\n  get fontSize() {\r\n    if (this.props.value.length < 7) {\r\n      return 6;\r\n    }\r\n\r\n    if (this.props.value.length < 11) {\r\n      return 5;\r\n    }\r\n\r\n    return 4;\r\n  }\r\n\r\n  get currentRate() {\r\n    const { baseAccount, fromAccount, toAccount, currencies, rates } = this.props;\r\n\r\n    if (fromAccount && toAccount && rates) {\r\n      const fromAccountSymbol = currencies[fromAccount.currency].symbol;\r\n      const toAccountSymbol = currencies[toAccount.currency].symbol;\r\n\r\n      if (fromAccount === baseAccount) {\r\n        const toValue = convertBetweenCurrencies(fromAccount.currency, 1, toAccount.currency, rates);\r\n        return `${fromAccountSymbol}1 = ${toAccountSymbol}${formatValueInLocale(i18n.language, toValue)}`;\r\n      } else {\r\n        const fromValue = convertBetweenCurrencies(toAccount.currency, 1, fromAccount.currency, rates);\r\n        return `${toAccountSymbol}1 = ${fromAccountSymbol}${formatValueInLocale(i18n.language, fromValue)}`;\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  getCaretPosition(value: string, position: number) {\r\n    const leftPart = value.slice(0, position);\r\n    const commasNumber = leftPart.split('').filter(symbol => symbol === ',').length;\r\n\r\n    return position + commasNumber;\r\n  }\r\n\r\n  getTitleFromAccount = (account: IAccount) => account.currency + ' ' + account.title;\r\n\r\n  onOpenSelect = () => {\r\n    this.setState({ isSelectOpened: true });\r\n  };\r\n\r\n  onCloseSelect = (searchStr: string) => {\r\n    this.setState({\r\n      isSelectOpened: false,\r\n      searchStr,\r\n      changedSearch: false,\r\n    });\r\n  };\r\n\r\n  onClickOutside = () => {\r\n    this.onCloseSelect(this.getTitleFromAccount(this.props.account));\r\n  };\r\n\r\n  onKeyDown = (event: any) => {\r\n    if (event.key === 'Backspace' && this.exchangeInputRef) {\r\n      const { selectionStart, selectionEnd } = event.currentTarget;\r\n\r\n      if (this.props.value[selectionStart - 1] === ',') {\r\n        this.exchangeInputRef.setSelectionRange(selectionStart - 1, selectionEnd - 1);\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  };\r\n\r\n  onChange = (event: React.FormEvent<HTMLInputElement>) => {\r\n    const value = event.currentTarget.value || '0';\r\n\r\n    if (!/^[0-9.,]+$/.test(value)) {\r\n      return;\r\n    }\r\n\r\n    this.caretStart = event.currentTarget.selectionStart;\r\n\r\n    const parsedValue = parseFloat(value.replace(/,/g, ''));\r\n\r\n    if (parsedValue > MAX_VALUE) {\r\n      return;\r\n    }\r\n\r\n    this.props.onChangeValue(parsedValue);\r\n  };\r\n\r\n  onChangeSearch = (searchStr: string) => {\r\n    this.setState({ searchStr, changedSearch: true });\r\n  };\r\n\r\n  renderContent = () => {\r\n    const { accounts } = this.props;\r\n\r\n    const searchStr = this.state.searchStr.toLowerCase();\r\n\r\n    const filteredAccounts = this.state.changedSearch\r\n      ? accounts.filter(account => {\r\n          const search = account.title + account.currency;\r\n          return search.toLowerCase().indexOf(searchStr) !== -1;\r\n        })\r\n      : accounts;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {filteredAccounts.map(account => (\r\n          <Select.TextItem\r\n            text={this.getTitleFromAccount(account)}\r\n            onClick={() => {\r\n              this.onCloseSelect(this.getTitleFromAccount(account));\r\n              this.props.onSelectAccount(account);\r\n              this.props.onSetBaseAccount(account);\r\n            }}\r\n            key={account.id}\r\n          />\r\n        ))}\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  handleExchangeInputRef = (element: any) => {\r\n    this.exchangeInputRef = element;\r\n  };\r\n\r\n  onFocus = () => {\r\n    this.props.onSetBaseAccount(this.props.account);\r\n  };\r\n\r\n  render() {\r\n    const { value, currencies, account, baseAccount, mode = BaseExchangeMode.FROM, t } = this.props;\r\n\r\n    const inputValue = value === '0' ? '' : value;\r\n    const currencySymbol = currencies[account.currency].symbol;\r\n\r\n    return (\r\n      <Wrapper mode={mode}>\r\n        <SelectWrapper>\r\n          <Select\r\n            content={this.renderContent}\r\n            isOpened={this.state.isSelectOpened}\r\n            onClickOutside={this.onClickOutside}\r\n            width={416}\r\n          >\r\n            {ref => (\r\n              <RegularInput\r\n                ref={ref}\r\n                value={this.state.searchStr}\r\n                onChangeText={this.onChangeSearch}\r\n                onFocus={this.onOpenSelect}\r\n              />\r\n            )}\r\n          </Select>\r\n        </SelectWrapper>\r\n        <ExchangeContentWrapper>\r\n          <ExchangeInputWrapper asPlaceholder={value === '0'} fontSize={this.fontSize}>\r\n            {inputValue && <Sign>{mode === BaseExchangeMode.FROM ? '-' : '+'}</Sign>}\r\n            <Currency htmlFor={mode.toString()}>{currencySymbol}</Currency>\r\n            <ExchangeInput\r\n              id={mode.toString()}\r\n              onChange={this.onChange}\r\n              value={inputValue}\r\n              placeholder={'0'}\r\n              onFocus={this.onFocus}\r\n              ref={this.handleExchangeInputRef}\r\n              onKeyDown={this.onKeyDown}\r\n              size={value.length}\r\n            />\r\n          </ExchangeInputWrapper>\r\n\r\n          {baseAccount === account && (\r\n            <CurrentRate>\r\n              <RateTitle>{t('exchange.currentRate')}</RateTitle>\r\n              <RateValue>{this.currentRate}</RateValue>\r\n            </CurrentRate>\r\n          )}\r\n        </ExchangeContentWrapper>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nconst translated = withTranslation();\r\nconst ConnectedBaseExchange = connect(mapStateToProps)(BaseExchange);\r\n\r\nexport default translated(ConnectedBaseExchange);\r\n","import React from 'react';\r\nimport { Wrapper, Placeholder, StyledInput, BottomLine } from './RegularInput.styles';\r\n\r\ninterface IRegularInputProps {\r\n  value: string;\r\n  onChangeText: (text: string) => void;\r\n  placeholder?: string;\r\n  icon?: React.ReactNode;\r\n  forwardRef?: any;\r\n  onFocus?: () => void;\r\n}\r\n\r\ntype TState = {\r\n  isFocused: boolean;\r\n};\r\n\r\nclass RegularInput extends React.Component<IRegularInputProps, TState> {\r\n  constructor(props: IRegularInputProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isFocused: false,\r\n    };\r\n  }\r\n\r\n  onChange = (event: React.FormEvent<HTMLInputElement>) => {\r\n    this.props.onChangeText(event.currentTarget.value);\r\n  };\r\n\r\n  onFocus = () => {\r\n    this.setState({ isFocused: true });\r\n    this.props.onFocus && this.props.onFocus();\r\n  };\r\n\r\n  onBlur = () => {\r\n    this.setState({ isFocused: false });\r\n  };\r\n\r\n  render() {\r\n    const { value, placeholder = '', icon = null, forwardRef } = this.props;\r\n\r\n    return (\r\n      <Wrapper ref={forwardRef}>\r\n        <StyledInput value={value} onChange={this.onChange} onFocus={this.onFocus} onBlur={this.onBlur} />\r\n        {icon}\r\n        {placeholder && <Placeholder isFocused={this.state.isFocused || Boolean(value)}>{placeholder}</Placeholder>}\r\n        <BottomLine isFocused={this.state.isFocused} />\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nconst WithForwardRef = React.forwardRef((props: IRegularInputProps, ref?: any) => (\r\n  <RegularInput {...props} forwardRef={ref} />\r\n));\r\n\r\nexport default WithForwardRef;\r\n","import React from 'react';\r\nimport { BaseExchange } from '../BaseExchange';\r\nimport { IApplicationState } from '../../../store';\r\nimport { changeFromAccount, changeFromValue, setBaseAccount } from '../../../store/echange/actions';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch, bindActionCreators } from 'redux';\r\nimport { getFormattedFromValue } from '../../../store/echange/selectors';\r\nimport { BaseExchangeMode } from '../BaseExchange/BaseExchange';\r\n\r\nconst mapStateToProps = (state: IApplicationState) => ({\r\n  fromAccount: state.exchange.fromAccount,\r\n  fromValue: getFormattedFromValue(state),\r\n});\r\n\r\ntype TStateProps = ReturnType<typeof mapStateToProps>;\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n      changeFromValue,\r\n      changeFromAccount,\r\n      setBaseAccount,\r\n    },\r\n    dispatch,\r\n  );\r\n\r\ntype TDispatchProps = ReturnType<typeof mapDispatchToProps>;\r\n\r\ntype TProps = TStateProps & TDispatchProps;\r\n\r\nconst ExchangeFrom: React.FC<TProps> = ({\r\n  fromAccount,\r\n  fromValue,\r\n  changeFromValue,\r\n  changeFromAccount,\r\n  setBaseAccount,\r\n}) =>\r\n  fromAccount && (\r\n    <BaseExchange\r\n      account={fromAccount}\r\n      value={fromValue}\r\n      onChangeValue={changeFromValue}\r\n      onSelectAccount={changeFromAccount}\r\n      onSetBaseAccount={setBaseAccount}\r\n      mode={BaseExchangeMode.FROM}\r\n    />\r\n  );\r\n\r\nconst ConnectedExchangeFrom = connect(mapStateToProps, mapDispatchToProps)(ExchangeFrom);\r\n\r\nexport default ConnectedExchangeFrom;\r\n","import React from 'react';\r\nimport { BaseExchange } from '../BaseExchange';\r\nimport { IApplicationState } from '../../../store';\r\nimport { changeToAccount, changeToValue, setBaseAccount } from '../../../store/echange/actions';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch, bindActionCreators } from 'redux';\r\nimport { getFormattedToValue } from '../../../store/echange/selectors';\r\nimport { BaseExchangeMode } from '../BaseExchange/BaseExchange';\r\n\r\nconst mapStateToProps = (state: IApplicationState) => ({\r\n  toAccount: state.exchange.toAccount,\r\n  toValue: getFormattedToValue(state),\r\n});\r\n\r\ntype TStateProps = ReturnType<typeof mapStateToProps>;\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n      changeToValue,\r\n      changeToAccount,\r\n      setBaseAccount,\r\n    },\r\n    dispatch,\r\n  );\r\n\r\ntype TDispatchProps = ReturnType<typeof mapDispatchToProps>;\r\n\r\ntype TProps = TStateProps & TDispatchProps;\r\n\r\nconst ExchangeTo: React.FC<TProps> = ({ toAccount, toValue, changeToValue, changeToAccount, setBaseAccount }) =>\r\n  toAccount && (\r\n    <BaseExchange\r\n      account={toAccount}\r\n      value={toValue}\r\n      onChangeValue={changeToValue}\r\n      onSelectAccount={changeToAccount}\r\n      onSetBaseAccount={setBaseAccount}\r\n      mode={BaseExchangeMode.TO}\r\n    />\r\n  );\r\n\r\nconst ConnectedExchangeTo = connect(mapStateToProps, mapDispatchToProps)(ExchangeTo);\r\n\r\nexport default ConnectedExchangeTo;\r\n","import styled, { css } from 'styled-components';\r\nimport { BaseButtonLook } from '../BaseButton';\r\n\r\nexport const Text = styled.div<{ look?: BaseButtonLook }>`\r\n  font-weight: 500;\r\n  font-size: 16px;\r\n  color: #000;\r\n\r\n  ${props =>\r\n    props.look === BaseButtonLook.SUCCESS &&\r\n    css`\r\n      color: #fff;\r\n    `}\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  padding: 0 32px;\r\n`;\r\n","import React from 'react';\r\nimport { BaseButton } from '../BaseButton';\r\nimport { Wrapper } from './RegularButton.styles';\r\n\r\ntype TBaseButtonProps = React.ComponentProps<typeof BaseButton>;\r\n\r\nconst RegularButton: React.FC<TBaseButtonProps> = ({ children, ...props }) => (\r\n  <BaseButton {...props}>\r\n    <Wrapper>{children}</Wrapper>\r\n  </BaseButton>\r\n);\r\n\r\nexport default RegularButton;\r\n","import React from 'react';\r\n\r\nimport { Text } from './RegularTextButton.styles';\r\nimport { RegularButton } from '../RegularButton';\r\n\r\ntype TRegularButtonProps = React.ComponentProps<typeof RegularButton>;\r\n\r\ninterface IRegularTextButton {\r\n  text: string;\r\n}\r\n\r\ntype TProps = IRegularTextButton & TRegularButtonProps;\r\n\r\nconst RegularTextButton: React.FC<TProps> = ({ text, look, ...props }) => (\r\n  <RegularButton look={look} {...props}>\r\n    <Text look={look}>{text}</Text>\r\n  </RegularButton>\r\n);\r\n\r\nexport default RegularTextButton;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  position: relative;\r\n  background-color: #fff;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const ReverseButtonWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n  height: 70px;\r\n`;\r\n\r\nexport const Header = styled.div`\r\n  flex-grow: 1;\r\n  padding: 30px 40px;\r\n  background-color: #fafafa;\r\n`;\r\n\r\nexport const ReverseButton = styled.div``;\r\n\r\nexport const Information = styled.div``;\r\n\r\nconst InformationRow = styled.div`\r\n  height: 70px;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0 30px;\r\n  border-top: 2px solid rgb(245, 245, 245);\r\n`;\r\n\r\nexport const From = styled(InformationRow)``;\r\nexport const To = styled(InformationRow)``;\r\nexport const Total = styled(InformationRow)``;\r\n\r\nexport const Title = styled.div`\r\n  font-weight: 500;\r\n`;\r\n\r\nexport const Value = styled.div`\r\n  margin-left: auto;\r\n  font-weight: 500;\r\n`;\r\n\r\nexport const FromValue = styled.div`\r\n  font-size: 40px;\r\n  font-weight: 600;\r\n  margin-bottom: 23px;\r\n`;\r\n\r\nexport const ToValue = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 40px;\r\n  font-weight: 600;\r\n  margin-bottom: 25px;\r\n`;\r\n\r\nexport const Subtitle = styled.div`\r\n  font-weight: 500;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport const CommentInputWrapper = styled.div`\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport const CornerIconWrapper = styled.div`\r\n  position: relative;\r\n  top: -7px;\r\n  margin-right: 10px;\r\n`;\r\n\r\nexport const ExchangeButtonWrapper = styled.div`\r\n  position: fixed;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  bottom: 30px;\r\n  width: 350px;\r\n`;\r\n\r\nexport const TotalWrapper = styled.div`\r\n  font-weight: 500;\r\n  font-size: 13px;\r\n  color: #000;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Amount = styled.div`\r\n  margin-right: 15px;\r\n  opacity: 0.9;\r\n`;\r\n\r\nexport const Rate = styled.div`\r\n  opacity: 0.6;\r\n`;\r\n","import styled, { keyframes } from 'styled-components';\r\n\r\nconst fadeIn = keyframes`\r\n    0% {\r\n        opacity: 0;\r\n    }    \r\n\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n`;\r\n\r\nconst slideIn = keyframes`\r\n    0% {\r\n        transform: translateY(30%);\r\n    }    \r\n\r\n    100% {\r\n        transform: translateY(0);\r\n    }\r\n`;\r\n\r\nexport const Overlay = styled.div`\r\n  position: fixed;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: rgba(230, 230, 230, 0.8);\r\n  animation: ${fadeIn} 0.25s ease;\r\n  z-index: 1000;\r\n  overflow-y: auto;\r\n  padding: 150px 0;\r\n`;\r\n\r\nexport const ContentWrapper = styled.div`\r\n  position: relative;\r\n  animation: ${slideIn} 0.25s ease;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  position: relative;\r\n  width: 450px;\r\n  background-color: #fff;\r\n  overflow-y: hidden;\r\n  border-radius: 20px;\r\n  box-shadow: 0 0 10px -1px rgba(0, 0, 0, 0.2);\r\n`;\r\n\r\nexport const CloseIconWrapper = styled.button`\r\n  position: absolute;\r\n  border: none;\r\n  background-color: transparent;\r\n  right: -30px;\r\n  top: -30px;\r\n  cursor: pointer;\r\n`;\r\n","import React from 'react';\r\nimport { Overlay, Content, ContentWrapper, CloseIconWrapper } from './Modal.styles';\r\nimport { FiX } from 'react-icons/fi';\r\n\r\ninterface IModalProps {\r\n  isOpened: boolean;\r\n  onRequestClose?: () => void;\r\n  externalContent?: () => React.ReactNode;\r\n}\r\n\r\nclass Modal extends React.Component<IModalProps> {\r\n  render() {\r\n    const { isOpened, onRequestClose, children, externalContent } = this.props;\r\n\r\n    return (\r\n      isOpened && (\r\n        <Overlay>\r\n          <ContentWrapper>\r\n            <CloseIconWrapper onClick={onRequestClose}>\r\n              <FiX size={24} />\r\n            </CloseIconWrapper>\r\n            <Content>{children}</Content>\r\n          </ContentWrapper>\r\n          {externalContent && externalContent()}\r\n        </Overlay>\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\nimport {\r\n  Wrapper,\r\n  From,\r\n  To,\r\n  Total,\r\n  Title,\r\n  Value,\r\n  Information,\r\n  Header,\r\n  FromValue,\r\n  ToValue,\r\n  Subtitle,\r\n  CommentInputWrapper,\r\n  CornerIconWrapper,\r\n  ExchangeButtonWrapper,\r\n  TotalWrapper,\r\n  Amount,\r\n  Rate,\r\n  ReverseButtonWrapper,\r\n} from './ExchangeModal.styles';\r\nimport { connect } from 'react-redux';\r\nimport { Modal } from '../../../components/Modal';\r\nimport { withTranslation, WithTranslation } from 'react-i18next';\r\nimport { IApplicationState } from '../../../store';\r\nimport { IAccount } from '../../../store/accounts/types';\r\nimport { RegularInput } from '../../../components/RegularInput';\r\nimport { Dispatch, bindActionCreators } from 'redux';\r\nimport { setComment, exchange, reverse } from '../../../store/echange/actions';\r\nimport { FiCornerDownRight } from 'react-icons/fi';\r\nimport { RegularTextButton } from '../../../components/Buttons/RegularTextButton';\r\nimport { BaseButtonLook } from '../../../components/Buttons/BaseButton';\r\nimport { convertBetweenCurrencies } from '../../../utils/covertBetweenCurrencies';\r\nimport { AnimatedRoundedButton } from '../../../components/Buttons/AnimatedRoundedButton';\r\nimport { FiRefreshCw } from 'react-icons/fi';\r\nimport { getAccountSymbol } from '../../../utils/getAccountSymbol';\r\nimport { formatValueInLocale } from '../../../utils/formatMoneyInLocale';\r\nimport { i18n } from '../../../i18n';\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n      setComment,\r\n      exchange,\r\n      reverse,\r\n    },\r\n    dispatch,\r\n  );\r\n\r\ntype TDispatchProps = ReturnType<typeof mapDispatchToProps>;\r\n\r\nconst mapStateToProps = (state: IApplicationState) => ({\r\n  fromAccount: state.exchange.fromAccount,\r\n  toAccount: state.exchange.toAccount,\r\n  fromValue: state.exchange.fromValue,\r\n  toValue: state.exchange.toValue,\r\n  currencies: state.currencies.data,\r\n  comment: state.exchange.comment,\r\n  rates: state.rates.rates,\r\n  isLoading: state.transactions.isLoading,\r\n});\r\n\r\ntype TStateProps = ReturnType<typeof mapStateToProps>;\r\n\r\ntype TExchangeModalProps = React.ComponentProps<typeof Modal>;\r\n\r\ntype TProps = TStateProps & TDispatchProps & TExchangeModalProps & WithTranslation;\r\n\r\nclass ExchangeModal extends React.Component<TProps> {\r\n  getAccountTitle(account: IAccount) {\r\n    return `${account.currency} · ${account.title}`;\r\n  }\r\n\r\n  renderExchangeButton = () => {\r\n    const { exchange, isLoading, t } = this.props;\r\n\r\n    return (\r\n      <ExchangeButtonWrapper>\r\n        <RegularTextButton\r\n          text={t(isLoading ? 'app.loading' : 'exchange.exchangeModal.exchange')}\r\n          onClick={exchange}\r\n          look={BaseButtonLook.SUCCESS}\r\n          isDisabled={isLoading}\r\n        />\r\n      </ExchangeButtonWrapper>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      isOpened,\r\n      onRequestClose,\r\n      fromAccount,\r\n      toAccount,\r\n      fromValue,\r\n      toValue,\r\n      currencies,\r\n      comment,\r\n      setComment,\r\n      reverse,\r\n      rates,\r\n      t,\r\n    } = this.props;\r\n\r\n    if (!fromAccount || !toAccount || !rates) {\r\n      return null;\r\n    }\r\n\r\n    const fromAccountTitle = this.getAccountTitle(fromAccount);\r\n    const toAccountTitle = this.getAccountTitle(toAccount);\r\n\r\n    const fromAccountCurrencySymbol = getAccountSymbol(fromAccount, currencies);\r\n    const toAccountCurrencySymbol = getAccountSymbol(toAccount, currencies);\r\n\r\n    const formattedFromValue = formatValueInLocale(i18n.language, fromValue);\r\n    const formattedToValue = formatValueInLocale(i18n.language, toValue);\r\n\r\n    const rate = convertBetweenCurrencies(fromAccount.currency, 1, toAccount.currency, rates);\r\n\r\n    return (\r\n      <Modal isOpened={isOpened} onRequestClose={onRequestClose} externalContent={this.renderExchangeButton}>\r\n        <Wrapper>\r\n          <Header>\r\n            <ReverseButtonWrapper>\r\n              <AnimatedRoundedButton onClick={reverse}>\r\n                <FiRefreshCw size={24} color={'#8B959E'} />\r\n              </AnimatedRoundedButton>\r\n            </ReverseButtonWrapper>\r\n            <FromValue>\r\n              {fromAccountCurrencySymbol}\r\n              {formattedFromValue}\r\n            </FromValue>\r\n            <ToValue>\r\n              <CornerIconWrapper>\r\n                <FiCornerDownRight size={32} />\r\n              </CornerIconWrapper>\r\n              {toAccountCurrencySymbol}\r\n              {formattedToValue}\r\n            </ToValue>\r\n            <Subtitle>\r\n              {t('exchange.exchangeModal.from')} {fromAccountTitle} {t('exchange.exchangeModal.to')} {toAccountTitle}\r\n            </Subtitle>\r\n            <CommentInputWrapper>\r\n              <RegularInput\r\n                value={comment}\r\n                onChangeText={setComment}\r\n                placeholder={t('exchange.exchangeModal.comment')}\r\n              />\r\n            </CommentInputWrapper>\r\n            <TotalWrapper>\r\n              <Amount>\r\n                {t('exchange.exchangeModal.amountTitle')}: {toAccountCurrencySymbol} {formattedToValue}\r\n              </Amount>\r\n              <Rate>\r\n                {t('exchange.exchangeModal.rate')}: {fromAccountCurrencySymbol}1 = {toAccountCurrencySymbol}\r\n                {formatValueInLocale(i18n.language, rate)}\r\n              </Rate>\r\n            </TotalWrapper>\r\n          </Header>\r\n          <Information>\r\n            <From>\r\n              <Title>{t('exchange.exchangeModal.from')}</Title>\r\n              <Value>{fromAccountTitle}</Value>\r\n            </From>\r\n            <To>\r\n              <Title>{t('exchange.exchangeModal.to')}</Title>\r\n              <Value>{toAccountTitle}</Value>\r\n            </To>\r\n            <Total>\r\n              <Title>{t('exchange.exchangeModal.total')}</Title>\r\n              <Value>\r\n                {toAccountCurrencySymbol}\r\n                {formattedToValue}\r\n              </Value>\r\n            </Total>\r\n          </Information>\r\n        </Wrapper>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst translated = withTranslation();\r\nconst ConnectedExchangeModal = connect(mapStateToProps, mapDispatchToProps)(ExchangeModal);\r\n\r\nexport default translated(ConnectedExchangeModal);\r\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  position: fixed;\n  z-index: 1000;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  background-color: #fff;\n`;\n","import React from 'react';\nimport { Wrapper } from './ScreenHolder.styles';\n\ninterface IScreenHolderProps {\n  isVisible: boolean;\n}\n\nconst ScreenHolder: React.FC<IScreenHolderProps> = ({ isVisible, children }) =>\n  isVisible ? <Wrapper>{children}</Wrapper> : null;\n\nexport default ScreenHolder;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  background-color: #fff;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const GotButtonWrapper = styled.div`\n  position: absolute;\n  left: 50%;\n  bottom: 30px;\n  transform: translateX(-50%);\n  width: 350px;\n`;\n\nexport const CheckIconWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 20px;\n`;\n\nexport const Summary = styled.h2`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  font-size: 32px;\n  font-weight: 400;\n`;\n\nexport const Top = styled.div`\n  margin-bottom: 10px;\n`;\n\nexport const Bottom = styled.div``;\n","import React from 'react';\nimport { ScreenHolder } from '../../../components/ScreenHolder';\nimport { IApplicationState } from '../../../store';\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { clearExchange, setHasExchanged } from '../../../store/echange/actions';\nimport { GotButtonWrapper, Wrapper, Summary, Top, Bottom, CheckIconWrapper } from './ExchangedScreenHolder.styles';\nimport { RegularTextButton } from '../../../components/Buttons/RegularTextButton';\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { BaseButtonLook } from '../../../components/Buttons/BaseButton';\nimport { getAccountSymbol } from '../../../utils/getAccountSymbol';\nimport { formatValueInLocale } from '../../../utils/formatMoneyInLocale';\nimport { i18n } from '../../../i18n';\nimport { FiCheckCircle } from 'react-icons/fi';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { Routes } from '../../../constants/Routes';\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      setHasExchanged,\n      clearExchange,\n    },\n    dispatch,\n  );\n\ntype TDispatchProps = ReturnType<typeof mapDispatchToProps>;\n\nconst mapStateToProps = (state: IApplicationState) => ({\n  hasExchanged: state.exchange.hasExchanged,\n  transaction: state.transactions.lastTransaction,\n  accounts: state.accounts.list,\n  currencies: state.currencies.data,\n});\n\ntype TStateProps = ReturnType<typeof mapStateToProps>;\n\ntype TProps = TStateProps & TDispatchProps & WithTranslation & RouteComponentProps;\n\nclass ExchangedScreenHolder extends React.Component<TProps> {\n  get fromAccount() {\n    const { transaction } = this.props;\n\n    if (!transaction) {\n      return null;\n    }\n\n    return this.props.accounts.find(account => account.id === transaction.fromAccountId);\n  }\n\n  get toAccount() {\n    const { transaction } = this.props;\n\n    if (!transaction) {\n      return null;\n    }\n\n    return this.props.accounts.find(account => account.id === transaction.toAccountId);\n  }\n\n  onGot = () => {\n    this.props.clearExchange();\n    this.props.history.replace(Routes.ACCOUNTS);\n  };\n\n  render() {\n    const { transaction, currencies, hasExchanged, t } = this.props;\n\n    if (!transaction || !this.fromAccount || !this.toAccount || !currencies) {\n      return null;\n    }\n\n    const fromAccountSymbol = getAccountSymbol(this.fromAccount, currencies);\n    const toAccountSymbol = getAccountSymbol(this.toAccount, currencies);\n\n    const formattedFromValue = formatValueInLocale(i18n.language, transaction.fromAccountValue);\n    const formattedToValue = formatValueInLocale(i18n.language, transaction.toAccountValue);\n\n    return (\n      <ScreenHolder isVisible={hasExchanged}>\n        <Wrapper>\n          <Summary>\n            <CheckIconWrapper>\n              <FiCheckCircle color={'rgb(139, 149, 158)'} size={80} />\n            </CheckIconWrapper>\n\n            <Top>{t('exchange.youExchanged')}</Top>\n            <Bottom>\n              {fromAccountSymbol}\n              {formattedFromValue} {t('exchange.to')} {toAccountSymbol}\n              {formattedToValue}\n            </Bottom>\n          </Summary>\n          <GotButtonWrapper>\n            <RegularTextButton text={t('exchange.gotIt')} onClick={this.onGot} look={BaseButtonLook.SUCCESS} />\n          </GotButtonWrapper>\n        </Wrapper>\n      </ScreenHolder>\n    );\n  }\n}\n\nconst translated = withTranslation();\nconst ConnectedScreenProps = connect(mapStateToProps, mapDispatchToProps)(ExchangedScreenHolder);\n\nexport default translated(withRouter(ConnectedScreenProps));\n","import React from 'react';\r\nimport { bindActionCreators, Dispatch } from 'redux';\r\nimport { CloseWrapper, ContinueButtonWrapper, ReverseButtonWrapper, Overlay, Title, Wrapper } from './Exchange.styles';\r\nimport { withTranslation, WithTranslation } from 'react-i18next';\r\nimport { AnimatedRoundedButton } from '../../components/Buttons/AnimatedRoundedButton';\r\nimport { FiRefreshCw, FiX } from 'react-icons/fi';\r\nimport {\r\n  reverse,\r\n  setBaseAccount,\r\n  setFromAccount,\r\n  setToAccount,\r\n  setExchangeModalVisibility,\r\n} from '../../store/echange/actions';\r\nimport { connect } from 'react-redux';\r\nimport { RoundedLink } from '../../components/RoundedLink';\r\nimport { Routes } from '../../constants/Routes';\r\nimport { IApplicationState } from '../../store';\r\nimport { ExchangeFrom } from './ExchangeFrom';\r\nimport { ExchangeTo } from './ExchangeTo';\r\nimport { RegularTextButton } from '../../components/Buttons/RegularTextButton';\r\nimport { BaseButtonLook } from '../../components/Buttons/BaseButton';\r\nimport { ExchangeModal } from './ExchangeModal';\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\r\nimport { ExchangedScreenHolder } from './ExchangedScreenHolder';\r\n\r\nconst mapStateToProps = (state: IApplicationState) => ({\r\n  accounts: state.accounts.list,\r\n  isContinueAvailable:\r\n    state.exchange.fromValue !== 0 &&\r\n    state.exchange.fromAccount &&\r\n    state.exchange.fromValue < state.exchange.fromAccount.value,\r\n  isExchangeModalVisible: state.exchange.isExchangeModalVisible,\r\n});\r\n\r\ntype TStateProps = ReturnType<typeof mapStateToProps>;\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n      reverse,\r\n      setBaseAccount,\r\n      setFromAccount,\r\n      setToAccount,\r\n      setExchangeModalVisibility,\r\n    },\r\n    dispatch,\r\n  );\r\n\r\ntype TDispatchProps = ReturnType<typeof mapDispatchToProps>;\r\n\r\ntype TProps = TStateProps & TDispatchProps & WithTranslation & RouteComponentProps;\r\n\r\nclass Exchange extends React.Component<TProps> {\r\n  componentDidMount() {\r\n    const { accounts } = this.props;\r\n\r\n    if (accounts.length > 1) {\r\n      const [first, second] = accounts;\r\n\r\n      this.props.setBaseAccount(first);\r\n      this.props.setFromAccount(first);\r\n      this.props.setToAccount(second);\r\n    }\r\n  }\r\n\r\n  onModalOpen = () => {\r\n    this.props.setExchangeModalVisibility(true);\r\n  };\r\n\r\n  onModalClose = () => {\r\n    this.props.setExchangeModalVisibility(false);\r\n  };\r\n\r\n  render() {\r\n    const { isContinueAvailable, reverse, isExchangeModalVisible, t } = this.props;\r\n\r\n    return (\r\n      <Wrapper>\r\n        <Overlay />\r\n        <Title>{t('exchange.title')}</Title>\r\n        <ReverseButtonWrapper>\r\n          <AnimatedRoundedButton onClick={reverse}>\r\n            <FiRefreshCw color={'#0075eb'} size={24} />\r\n          </AnimatedRoundedButton>\r\n        </ReverseButtonWrapper>\r\n        <CloseWrapper>\r\n          <RoundedLink to={Routes.HOME}>\r\n            <FiX color={'#0075eb'} size={24} />\r\n          </RoundedLink>\r\n        </CloseWrapper>\r\n\r\n        <ExchangeFrom />\r\n        <ExchangeTo />\r\n\r\n        {!isExchangeModalVisible && (\r\n          <ContinueButtonWrapper>\r\n            <RegularTextButton\r\n              text={t('exchange.continue')}\r\n              onClick={this.onModalOpen}\r\n              look={BaseButtonLook.SUCCESS}\r\n              isDisabled={!isContinueAvailable}\r\n            />\r\n          </ContinueButtonWrapper>\r\n        )}\r\n\r\n        <ExchangeModal isOpened={isExchangeModalVisible} onRequestClose={this.onModalClose} />\r\n        <ExchangedScreenHolder />\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nconst translated = withTranslation();\r\n\r\nconst ConnectedExchange = connect(mapStateToProps, mapDispatchToProps)(Exchange);\r\n\r\nexport default translated(withRouter(ConnectedExchange));\r\n","import Exchange from './Exchange';\r\n\r\nexport default Exchange;\r\n"],"sourceRoot":""}