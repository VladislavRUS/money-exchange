{"version":3,"sources":["store/echange/actions.ts","store/rates/types.ts","store/rates/actions.ts","store/transactions/types.ts","entry/App/App.tsx","store/user/reducer.ts","store/accounts/reducer.ts","store/currencies/reducer.ts","store/echange/reducer.ts","store/transactions/actions.ts","store/rates/selectors.ts","store/echange/sagas.ts","api/index.ts","store/rates/sagas.ts","store/rates/reducer.ts","store/transactions/reducer.ts","store/transactions/sagas.ts","store/cards/reducer.ts","store/index.ts","index.tsx","configureStore.ts","store/echange/selectors.ts","store/accounts/types.ts","utils/covertBetweenCurrencies.ts","constants/Routes.ts","store/accounts/actions.ts","components/SuspenceFallback/SuspenseFallback.styles.ts","components/SuspenceFallback/SuspenseFallback.tsx","components/SuspenceFallback/index.ts","store/echange/types.ts","assets/images/user.jpeg","i18n/index.ts"],"names":["reverse","action","ExchangeActionTypes","REVERSE","setBaseAccount","account","SET_BASE_ACCOUNT","changeFromAccount","CHANGE_FROM_ACCOUNT","changeToAccount","CHANGE_TO_ACCOUNT","setFromAccount","SET_FROM_ACCOUNT","setToAccount","SET_TO_ACCOUNT","changeFromValue","value","CHANGE_FROM_VALUE","changeToValue","CHANGE_TO_VALUE","setFromValue","SET_FROM_VALUE","setToValue","SET_TO_VALUE","updateValues","UPDATE_VALUES","setComment","text","SET_COMMENT","exchange","EXCHANGE","setExchangeModalVisibility","isVisible","SET_EXCHANGE_MODAL_VISIBILITY","setHasExchanged","hasExchanged","SET_HAS_EXCHANGED","clearExchange","CLEAR_EXCHANGE","RatesActionTypes","TransactionsActionTypes","fetchRatesAsync","createAsyncAction","GET_RATES_REQUEST","GET_RATES_SUCCESS","GET_RATES_ERROR","getRates","GET_RATES","Home","lazy","Exchange","App","ratesInterval","this","props","window","setInterval","clearInterval","fallback","path","Routes","component","HOME","React","Component","ConnectedApp","connect","dispatch","bindActionCreators","initialState","current","user","avatarUrl","userImage","isDemo","userReducer","createReducer","list","baseCurrency","viewMode","accountsReducer","AccountsActionsTypes","SET_GRID_VIEW_MODE","state","SET_TABLE_VIEW_MODE","SET_BASE_CURRENCY","payload","SET_ACCOUNT_VALUE","map","id","accountId","data","currenciesReducer","fromAccount","toAccount","fromValue","toValue","baseAccount","comment","isExchangeModalVisible","exchangeReducer","createTransaction","transaction","CREATE_TRANSACTION","addTransaction","ADD_TRANSACTION","createTransactionAsync","CREATE_TRANSACTION_REQUEST","CREATE_TRANSACTION_SUCCESS","CREATE_TRANSACTION_ERROR","rates","handleChangeFromValue","handleChangeToValue","handleUpdateValues","handleReverse","handleChangeFromAccount","handleChangeToAccount","handleExchange","watchChangeFromValue","watchChangeToValue","watchUpdatesValue","watchReverse","watchChangeFromAccount","watchChangeToAccount","watchExchange","exchangeSaga","put","select","getBaseAccount","getFromAccount","getToAccount","getFromValue","currentFromValue","getToValue","currentToValue","convertBetweenCurrencies","currency","valueInDollars","Date","getTime","toString","fromAccountId","fromAccountValue","toAccountId","toAccountValue","dateTime","takeEvery","all","fork","RATES_API","axios","create","defaults","baseURL","config","RATES_BASE_URL","interceptors","request","use","requestConfig","params","app_id","RATES_API_KEY","handleGetRates","watchGetRates","ratesSaga","call","get","success","mockRates","ratesReducer","isLoading","lastTransaction","transactionsReducer","handleCreateTransaction","watchCreateTransaction","transactionsSaga","delay","setAccountValue","cardsReducer","rootSaga","createRootReducer","history","combineReducers","accounts","currencies","transactions","cards","router","connectRouter","createHashHistory","initialReduxState","store","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","routerMiddleware","run","configureStore","ReactDOM","render","document","getElementById","body","addEventListener","classList","add","event","key","remove","formatValue","Intl","NumberFormat","useGrouping","minimumFractionDigits","maximumFractionDigits","format","getFormattedFromValue","getFormattedToValue","fromCurrency","toCurrency","setBaseCurrency","Wrapper","styled","div","SuspenseFallback","size","color","module","exports","resources","en","translation","ru","i18n","initReactI18next","init","lng","keySeparator","interpolation","escapeValue"],"mappings":"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","file":"static/js/main.d9b7ab50.chunk.js","sourcesContent":["import { action } from 'typesafe-actions';\r\nimport { ExchangeActionTypes } from './types';\r\nimport { IAccount } from '../accounts/types';\r\n\r\nexport const reverse = () => action(ExchangeActionTypes.REVERSE);\r\nexport const setBaseAccount = (account: IAccount) => action(ExchangeActionTypes.SET_BASE_ACCOUNT, account);\r\n\r\n// Set values and update them\r\nexport const changeFromAccount = (account: IAccount) => action(ExchangeActionTypes.CHANGE_FROM_ACCOUNT, account);\r\nexport const changeToAccount = (account: IAccount) => action(ExchangeActionTypes.CHANGE_TO_ACCOUNT, account);\r\n\r\nexport const setFromAccount = (account: IAccount) => action(ExchangeActionTypes.SET_FROM_ACCOUNT, account);\r\nexport const setToAccount = (account: IAccount) => action(ExchangeActionTypes.SET_TO_ACCOUNT, account);\r\n\r\n// Set values and update them\r\nexport const changeFromValue = (value: number) => action(ExchangeActionTypes.CHANGE_FROM_VALUE, value);\r\nexport const changeToValue = (value: number) => action(ExchangeActionTypes.CHANGE_TO_VALUE, value);\r\n\r\n// Set values\r\nexport const setFromValue = (value: number) => action(ExchangeActionTypes.SET_FROM_VALUE, value);\r\nexport const setToValue = (value: number) => action(ExchangeActionTypes.SET_TO_VALUE, value);\r\n\r\n// Update another account according to base\r\nexport const updateValues = () => action(ExchangeActionTypes.UPDATE_VALUES);\r\n\r\nexport const setComment = (text: string) => action(ExchangeActionTypes.SET_COMMENT, text);\r\n\r\nexport const exchange = () => action(ExchangeActionTypes.EXCHANGE);\r\n\r\nexport const setExchangeModalVisibility = (isVisible: boolean) =>\r\n  action(ExchangeActionTypes.SET_EXCHANGE_MODAL_VISIBILITY, isVisible);\r\n\r\nexport const setHasExchanged = (hasExchanged: boolean) => action(ExchangeActionTypes.SET_HAS_EXCHANGED, hasExchanged);\r\nexport const clearExchange = () => action(ExchangeActionTypes.CLEAR_EXCHANGE);\r\n","export interface IRatesState {\r\n  rates: IRates | null;\r\n  isLoading: boolean;\r\n}\r\n\r\nexport interface IRates {\r\n  [key: string]: number;\r\n}\r\n\r\nexport enum RatesActionTypes {\r\n  GET_RATES = '@@rates/GET_RATES',\r\n  GET_RATES_REQUEST = '@@rates/GET_RATES_REQUEST',\r\n  GET_RATES_SUCCESS = '@@rates/GET_RATES_SUCCESS',\r\n  GET_RATES_ERROR = '@@rates/GET_RATES_ERROR',\r\n}\r\n","import { action, createAsyncAction } from 'typesafe-actions';\r\nimport { IRates, RatesActionTypes } from './types';\r\n\r\nexport const fetchRatesAsync = createAsyncAction(\r\n  RatesActionTypes.GET_RATES_REQUEST,\r\n  RatesActionTypes.GET_RATES_SUCCESS,\r\n  RatesActionTypes.GET_RATES_ERROR,\r\n)<undefined, IRates, undefined>();\r\n\r\nexport const getRates = () => action(RatesActionTypes.GET_RATES);\r\n","export interface ITransactionsState {\r\n  list: ITransaction[];\r\n  isLoading: boolean;\r\n  lastTransaction: ITransaction | null;\r\n}\r\n\r\nexport interface ITransaction {\r\n  id: string;\r\n  fromAccountId: string;\r\n  fromAccountValue: number;\r\n  toAccountId: string;\r\n  toAccountValue: number;\r\n  valueInDollars: number;\r\n  dateTime: number;\r\n}\r\n\r\nexport enum TransactionsActionTypes {\r\n  ADD_TRANSACTION = '@@transactions/ADD_TRANSACTION',\r\n  CREATE_TRANSACTION = '@@transactions/CREATE_TRANSACTION',\r\n  CREATE_TRANSACTION_REQUEST = '@@transactions/CREATE_TRANSACTION_REQUEST',\r\n  CREATE_TRANSACTION_SUCCESS = '@@transactions/CREATE_TRANSACTION_SUCCESS',\r\n  CREATE_TRANSACTION_ERROR = '@@transactions/CREATE_TRANSACTION_ERROR',\r\n}\r\n","import React, { Suspense, lazy } from 'react';\r\nimport { Dispatch, bindActionCreators } from 'redux';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { Routes } from '../../constants/Routes';\r\nimport { getRates } from '../../store/rates/actions';\r\nimport { connect } from 'react-redux';\r\nimport { SuspenseFallback } from '../../components/SuspenceFallback';\r\n\r\nconst Home = lazy(() => import('../../views/Home'));\r\nconst Exchange = lazy(() => import('../../views/Exchange'));\r\n\r\nconst UPDATE_INTERVAL_MS = 10000;\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n      getRates,\r\n    },\r\n    dispatch,\r\n  );\r\n\r\ntype TDispatchProps = ReturnType<typeof mapDispatchToProps>;\r\n\r\ntype TProps = TDispatchProps;\r\n\r\nclass App extends React.Component<TProps> {\r\n  ratesInterval: number | null = null;\r\n\r\n  componentDidMount() {\r\n    this.props.getRates();\r\n    this.ratesInterval = window.setInterval(this.props.getRates, UPDATE_INTERVAL_MS);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.ratesInterval && window.clearInterval(this.ratesInterval);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Suspense fallback={<SuspenseFallback />}>\r\n        <Switch>\r\n          <Switch>\r\n            <Route path={Routes.EXCHANGE} component={Exchange} />\r\n            <Route path={Routes.HOME} component={Home} />\r\n          </Switch>\r\n        </Switch>\r\n      </Suspense>\r\n    );\r\n  }\r\n}\r\n\r\nconst ConnectedApp = connect(null, mapDispatchToProps)(App);\r\n\r\nexport default ConnectedApp;\r\n","import { IUserState } from './types';\r\nimport { createReducer } from 'typesafe-actions';\r\nimport user from '../../mocks/user.json';\r\nimport userImage from '../../assets/images/user.jpeg';\r\n\r\nexport const initialState: IUserState = {\r\n  current: {\r\n    ...user,\r\n    avatarUrl: userImage,\r\n  },\r\n  isDemo: true,\r\n};\r\n\r\nexport const userReducer = createReducer(initialState);\r\n","import { IAccountsState, AccountsActionsTypes } from './types';\r\nimport { ActionType, createReducer } from 'typesafe-actions';\r\nimport accounts from '../../mocks/accounts.json';\r\nimport * as accountsActions from './actions';\r\n\r\ntype AccountsAction = ActionType<typeof accountsActions>;\r\n\r\nexport const initialState: IAccountsState = {\r\n  list: accounts,\r\n  baseCurrency: 'GBP',\r\n  viewMode: 'grid',\r\n};\r\n\r\nexport const accountsReducer = createReducer<IAccountsState, AccountsAction>(initialState, {\r\n  [AccountsActionsTypes.SET_GRID_VIEW_MODE]: state => ({ ...state, viewMode: 'grid' }),\r\n  [AccountsActionsTypes.SET_TABLE_VIEW_MODE]: state => ({ ...state, viewMode: 'table' }),\r\n  [AccountsActionsTypes.SET_BASE_CURRENCY]: (state, action) => ({ ...state, baseCurrency: action.payload }),\r\n  [AccountsActionsTypes.SET_ACCOUNT_VALUE]: (state, action) => ({\r\n    ...state,\r\n    list: state.list.map(account => {\r\n      if (account.id === action.payload.accountId) {\r\n        return { ...account, value: action.payload.value };\r\n      }\r\n\r\n      return account;\r\n    }),\r\n  }),\r\n});\r\n","import { ICurrenciesState } from './types';\r\nimport { createReducer } from 'typesafe-actions';\r\nimport currencies from '../../mocks/currencies.json';\r\n\r\nexport const initialState: ICurrenciesState = {\r\n  data: currencies,\r\n};\r\n\r\nexport const currenciesReducer = createReducer(initialState);\r\n","import { ActionType, createReducer } from 'typesafe-actions';\r\nimport { ExchangeActionTypes, IExchangeState } from './types';\r\n\r\nimport * as exchangeActions from './actions';\r\ntype ExchangeAction = ActionType<typeof exchangeActions>;\r\n\r\nconst initialState: IExchangeState = {\r\n  fromAccount: null,\r\n  toAccount: null,\r\n  fromValue: 0,\r\n  toValue: 0,\r\n  baseAccount: null,\r\n  comment: '',\r\n  isExchangeModalVisible: false,\r\n  hasExchanged: false,\r\n};\r\n\r\nexport const exchangeReducer = createReducer<IExchangeState, ExchangeAction>(initialState, {\r\n  [ExchangeActionTypes.SET_BASE_ACCOUNT]: (state, action) => ({ ...state, baseAccount: action.payload }),\r\n  [ExchangeActionTypes.SET_FROM_ACCOUNT]: (state, action) => ({\r\n    ...state,\r\n    fromAccount: action.payload,\r\n  }),\r\n  [ExchangeActionTypes.SET_TO_ACCOUNT]: (state, action) => ({\r\n    ...state,\r\n    toAccount: action.payload,\r\n  }),\r\n  [ExchangeActionTypes.SET_FROM_VALUE]: (state, action) => ({ ...state, fromValue: action.payload }),\r\n  [ExchangeActionTypes.SET_TO_VALUE]: (state, action) => ({ ...state, toValue: action.payload }),\r\n  [ExchangeActionTypes.SET_COMMENT]: (state, action) => ({ ...state, comment: action.payload }),\r\n  [ExchangeActionTypes.SET_EXCHANGE_MODAL_VISIBILITY]: (state, action) => ({\r\n    ...state,\r\n    isExchangeModalVisible: action.payload,\r\n  }),\r\n  [ExchangeActionTypes.SET_HAS_EXCHANGED]: (state, action) => ({\r\n    ...state,\r\n    hasExchanged: action.payload,\r\n  }),\r\n  [ExchangeActionTypes.CLEAR_EXCHANGE]: () => initialState,\r\n});\r\n","import { action, createAsyncAction } from 'typesafe-actions';\r\nimport { TransactionsActionTypes, ITransaction } from './types';\r\nimport { IAccount } from '../accounts/types';\r\n\r\nexport const createTransaction = (fromAccount: IAccount, toAccount: IAccount, transaction: ITransaction) =>\r\n  action(TransactionsActionTypes.CREATE_TRANSACTION, { fromAccount, toAccount, transaction });\r\n\r\nexport const addTransaction = (transaction: ITransaction) =>\r\n  action(TransactionsActionTypes.ADD_TRANSACTION, transaction);\r\n\r\nexport const createTransactionAsync = createAsyncAction(\r\n  TransactionsActionTypes.CREATE_TRANSACTION_REQUEST,\r\n  TransactionsActionTypes.CREATE_TRANSACTION_SUCCESS,\r\n  TransactionsActionTypes.CREATE_TRANSACTION_ERROR,\r\n)<undefined, ITransaction, undefined>();\r\n","import { IApplicationState } from '../index';\r\n\r\nexport const getRates = (state: IApplicationState) => state.rates.rates;\r\n","import { ITransaction } from '../transactions/types';\r\nimport { createTransaction } from '../transactions/actions';\r\nimport { all, fork, put, select, takeEvery } from 'redux-saga/effects';\r\nimport { ExchangeActionTypes } from './types';\r\nimport {\r\n  changeFromAccount,\r\n  changeFromValue,\r\n  changeToAccount,\r\n  changeToValue,\r\n  reverse,\r\n  setBaseAccount,\r\n  setFromAccount,\r\n  setFromValue,\r\n  setToAccount,\r\n  setToValue,\r\n  updateValues,\r\n} from './actions';\r\nimport { getRates } from '../rates/selectors';\r\nimport { getBaseAccount, getFromAccount, getFromValue, getToAccount, getToValue } from './selectors';\r\nimport { convertBetweenCurrencies } from '../../utils/covertBetweenCurrencies';\r\nimport { RatesActionTypes } from '../rates/types';\r\n\r\nfunction* handleChangeFromValue(action: ReturnType<typeof changeFromValue>) {\r\n  yield put(setFromValue(action.payload));\r\n  yield put(updateValues());\r\n}\r\n\r\nfunction* handleChangeToValue(action: ReturnType<typeof changeToValue>) {\r\n  yield put(setToValue(action.payload));\r\n  yield put(updateValues());\r\n}\r\n\r\nfunction* handleUpdateValues() {\r\n  const rates: ReturnType<typeof getRates> = yield select(getRates);\r\n  const baseAccount: ReturnType<typeof getBaseAccount> = yield select(getBaseAccount);\r\n  const fromAccount: ReturnType<typeof getFromAccount> = yield select(getFromAccount);\r\n  const toAccount: ReturnType<typeof getToAccount> = yield select(getToAccount);\r\n\r\n  if (!rates || !fromAccount || !toAccount || !baseAccount) {\r\n    return;\r\n  }\r\n\r\n  const currentFromValue: ReturnType<typeof getFromValue> = yield select(getFromValue);\r\n  const currentToValue: ReturnType<typeof getToValue> = yield select(getToValue);\r\n\r\n  if (fromAccount === baseAccount) {\r\n    const toValue = convertBetweenCurrencies(fromAccount.currency, currentFromValue, toAccount.currency, rates);\r\n    yield put(setToValue(toValue));\r\n  } else {\r\n    const fromValue = convertBetweenCurrencies(toAccount.currency, currentToValue, fromAccount.currency, rates);\r\n    yield put(setFromValue(fromValue));\r\n  }\r\n}\r\n\r\nfunction* handleReverse() {\r\n  const fromAccount: ReturnType<typeof getFromAccount> = yield select(getFromAccount);\r\n  const toAccount: ReturnType<typeof getToAccount> = yield select(getToAccount);\r\n  const baseAccount: ReturnType<typeof getBaseAccount> = yield select(getBaseAccount);\r\n\r\n  if (!fromAccount || !toAccount || !baseAccount) {\r\n    return;\r\n  }\r\n\r\n  yield put(setFromAccount(toAccount));\r\n  yield put(setToAccount(fromAccount));\r\n\r\n  if (fromAccount === baseAccount) {\r\n    yield put(setBaseAccount(toAccount));\r\n  } else {\r\n    yield put(setBaseAccount(fromAccount));\r\n  }\r\n\r\n  yield put(updateValues());\r\n}\r\n\r\nfunction* handleChangeFromAccount(action: ReturnType<typeof changeFromAccount>) {\r\n  const toAccount: ReturnType<typeof getToAccount> = yield select(getToAccount);\r\n\r\n  if (action.payload === toAccount) {\r\n    yield put(reverse());\r\n  } else {\r\n    yield put(setFromAccount(action.payload));\r\n    yield put(updateValues());\r\n  }\r\n}\r\n\r\nfunction* handleChangeToAccount(action: ReturnType<typeof changeToAccount>) {\r\n  const fromAccount: ReturnType<typeof getFromAccount> = yield select(getFromAccount);\r\n\r\n  if (action.payload === fromAccount) {\r\n    yield put(reverse());\r\n  } else {\r\n    yield put(setToAccount(action.payload));\r\n    yield put(updateValues());\r\n  }\r\n}\r\n\r\nfunction* handleExchange() {\r\n  const fromAccount: ReturnType<typeof getFromAccount> = yield select(getFromAccount);\r\n  const toAccount: ReturnType<typeof getToAccount> = yield select(getToAccount);\r\n  const rates: ReturnType<typeof getRates> = yield select(getRates);\r\n\r\n  if (!fromAccount || !toAccount || !rates) {\r\n    return;\r\n  }\r\n\r\n  const fromValue: ReturnType<typeof getFromValue> = yield select(getFromValue);\r\n  const toValue: ReturnType<typeof getToValue> = yield select(getToValue);\r\n\r\n  const valueInDollars = convertBetweenCurrencies(toAccount.currency, fromValue, fromAccount.currency, rates);\r\n\r\n  const transaction: ITransaction = {\r\n    id: new Date().getTime().toString(),\r\n    fromAccountId: fromAccount.id,\r\n    fromAccountValue: fromValue,\r\n    toAccountId: toAccount.id,\r\n    toAccountValue: toValue,\r\n    valueInDollars,\r\n    dateTime: new Date().getTime(),\r\n  };\r\n\r\n  yield put(createTransaction(fromAccount, toAccount, transaction));\r\n}\r\n\r\n// WATCHERS\r\nfunction* watchChangeFromValue() {\r\n  yield takeEvery(ExchangeActionTypes.CHANGE_FROM_VALUE, handleChangeFromValue);\r\n}\r\n\r\nfunction* watchChangeToValue() {\r\n  yield takeEvery(ExchangeActionTypes.CHANGE_TO_VALUE, handleChangeToValue);\r\n}\r\n\r\nfunction* watchUpdatesValue() {\r\n  yield takeEvery([ExchangeActionTypes.UPDATE_VALUES, RatesActionTypes.GET_RATES_SUCCESS], handleUpdateValues);\r\n}\r\n\r\nfunction* watchReverse() {\r\n  yield takeEvery(ExchangeActionTypes.REVERSE, handleReverse);\r\n}\r\n\r\nfunction* watchChangeFromAccount() {\r\n  yield takeEvery(ExchangeActionTypes.CHANGE_FROM_ACCOUNT, handleChangeFromAccount);\r\n}\r\n\r\nfunction* watchChangeToAccount() {\r\n  yield takeEvery(ExchangeActionTypes.CHANGE_TO_ACCOUNT, handleChangeToAccount);\r\n}\r\n\r\nfunction* watchExchange() {\r\n  yield takeEvery(ExchangeActionTypes.EXCHANGE, handleExchange);\r\n}\r\n\r\nfunction* exchangeSaga() {\r\n  yield all([\r\n    fork(watchChangeFromValue),\r\n    fork(watchChangeToValue),\r\n    fork(watchUpdatesValue),\r\n    fork(watchReverse),\r\n    fork(watchChangeFromAccount),\r\n    fork(watchChangeToAccount),\r\n    fork(watchExchange),\r\n  ]);\r\n}\r\n\r\nexport { exchangeSaga };\r\n","import axios from 'axios';\nimport config from '../config.json';\n\nconst RATES_API = axios.create();\n\nRATES_API.defaults.baseURL = config.RATES_BASE_URL;\n\nRATES_API.interceptors.request.use(requestConfig => {\n  requestConfig.params = {\n    ...requestConfig.params,\n    // eslint-disable-next-line @typescript-eslint/camelcase\n    app_id: config.RATES_API_KEY,\n  };\n\n  return requestConfig;\n});\n\nexport { RATES_API };\n","import { all, fork, takeEvery, put, call } from 'redux-saga/effects';\r\nimport { RatesActionTypes } from './types';\r\nimport { fetchRatesAsync } from './actions';\r\nimport { RATES_API } from '../../api';\r\nimport mockRates from '../../mocks/rates.json';\r\n\r\nfunction* handleGetRates() {\r\n  yield put(fetchRatesAsync.request());\r\n\r\n  try {\r\n    const { data } = yield call(RATES_API.get, '/api/latest.json');\r\n    const { rates } = data;\r\n\r\n    yield put(fetchRatesAsync.success(rates));\r\n  } catch (e) {\r\n    yield put(fetchRatesAsync.success(mockRates));\r\n  }\r\n}\r\n\r\n// WATCHERS\r\n\r\nfunction* watchGetRates() {\r\n  yield takeEvery(RatesActionTypes.GET_RATES, handleGetRates);\r\n}\r\n\r\nfunction* ratesSaga() {\r\n  yield all([fork(watchGetRates)]);\r\n}\r\n\r\nexport { ratesSaga };\r\n","import * as ratesActions from './actions';\r\nimport { ActionType, createReducer } from 'typesafe-actions';\r\nimport { IRatesState, RatesActionTypes } from './types';\r\n\r\ntype RatesAction = ActionType<typeof ratesActions>;\r\n\r\nconst initialState: IRatesState = {\r\n  isLoading: false,\r\n  rates: null,\r\n};\r\n\r\nconst ratesReducer = createReducer<IRatesState, RatesAction>(initialState, {\r\n  [RatesActionTypes.GET_RATES_REQUEST]: state => ({ ...state, isLoading: true }),\r\n  [RatesActionTypes.GET_RATES_SUCCESS]: (state, action) => ({ ...state, rates: action.payload, isLoading: false }),\r\n  [RatesActionTypes.GET_RATES_ERROR]: state => ({ ...state, isLoading: false }),\r\n});\r\n\r\nexport { ratesReducer };\r\n","import { createReducer, ActionType } from 'typesafe-actions';\r\nimport { ITransactionsState, TransactionsActionTypes } from './types';\r\nimport transactions from '../../mocks/transactions.json';\r\nimport * as transactionsActions from './actions';\r\n\r\ntype TransactionsAction = ActionType<typeof transactionsActions>;\r\n\r\nconst initialState: ITransactionsState = {\r\n  list: transactions,\r\n  isLoading: false,\r\n  lastTransaction: null,\r\n};\r\n\r\nexport const transactionsReducer = createReducer<ITransactionsState, TransactionsAction>(initialState, {\r\n  [TransactionsActionTypes.CREATE_TRANSACTION_REQUEST]: state => ({ ...state, isLoading: true }),\r\n  [TransactionsActionTypes.CREATE_TRANSACTION_SUCCESS]: (state, action) => ({\r\n    ...state,\r\n    isLoading: false,\r\n    lastTransaction: action.payload,\r\n  }),\r\n  [TransactionsActionTypes.CREATE_TRANSACTION_ERROR]: state => ({ ...state, isLoading: false }),\r\n  [TransactionsActionTypes.ADD_TRANSACTION]: (state, action) => ({ ...state, list: [...state.list, action.payload] }),\r\n});\r\n","import { setExchangeModalVisibility, setHasExchanged } from '../echange/actions';\r\nimport { createTransaction, createTransactionAsync, addTransaction } from './actions';\r\nimport { TransactionsActionTypes } from './types';\r\nimport { all, fork, takeEvery, delay, put } from 'redux-saga/effects';\r\nimport { setAccountValue } from '../accounts/actions';\r\n\r\nfunction* handleCreateTransaction(action: ReturnType<typeof createTransaction>) {\r\n  yield put(createTransactionAsync.request());\r\n\r\n  // Just to imitate network\r\n  yield delay(300);\r\n\r\n  const fromAccountValue = action.payload.fromAccount.value - action.payload.transaction.fromAccountValue;\r\n  const toAccountValue = action.payload.toAccount.value + action.payload.transaction.toAccountValue;\r\n\r\n  yield put(setAccountValue(action.payload.fromAccount.id, fromAccountValue));\r\n  yield put(setAccountValue(action.payload.toAccount.id, toAccountValue));\r\n  yield put(addTransaction(action.payload.transaction));\r\n\r\n  yield put(createTransactionAsync.success(action.payload.transaction));\r\n\r\n  yield put(setExchangeModalVisibility(false));\r\n  yield put(setHasExchanged(true));\r\n}\r\n\r\nfunction* watchCreateTransaction() {\r\n  yield takeEvery(TransactionsActionTypes.CREATE_TRANSACTION, handleCreateTransaction);\r\n}\r\n\r\nfunction* transactionsSaga() {\r\n  yield all([fork(watchCreateTransaction)]);\r\n}\r\n\r\nexport { transactionsSaga };\r\n","import { ICardsState } from './types';\nimport { createReducer } from 'typesafe-actions';\nimport cards from '../../mocks/cards.json';\n\nconst initialState: ICardsState = {\n  list: cards,\n};\n\nconst cardsReducer = createReducer(initialState);\n\nexport { cardsReducer };\n","import { ITransactionsState } from './transactions/types';\nimport { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport { History } from 'history';\nimport { IUserState } from './user/types';\nimport { userReducer } from './user/reducer';\nimport { accountsReducer } from './accounts/reducer';\nimport { IAccountsState } from './accounts/types';\nimport { currenciesReducer } from './currencies/reducer';\nimport { ICurrenciesState } from './currencies/types';\nimport { exchangeReducer } from './echange/reducer';\nimport { IExchangeState } from './echange/types';\nimport { exchangeSaga } from './echange/sagas';\nimport { all, fork } from 'redux-saga/effects';\nimport { ratesSaga } from './rates/sagas';\nimport { IRatesState } from './rates/types';\nimport { ratesReducer } from './rates/reducer';\nimport { transactionsReducer } from './transactions/reducer';\nimport { transactionsSaga } from './transactions/sagas';\nimport { ICardsState } from './cards/types';\nimport { cardsReducer } from './cards/reducer';\n\nexport interface IApplicationState {\n  user: IUserState;\n  accounts: IAccountsState;\n  currencies: ICurrenciesState;\n  exchange: IExchangeState;\n  rates: IRatesState;\n  cards: ICardsState;\n  transactions: ITransactionsState;\n}\n\nexport const createRootReducer = (history: History) =>\n  combineReducers({\n    user: userReducer,\n    accounts: accountsReducer,\n    currencies: currenciesReducer,\n    exchange: exchangeReducer,\n    rates: ratesReducer,\n    transactions: transactionsReducer,\n    cards: cardsReducer,\n    router: connectRouter(history),\n  });\n\nexport function* rootSaga() {\n  yield all([fork(exchangeSaga), fork(ratesSaga), fork(transactionsSaga)]);\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'reset-css';\r\nimport './index.css';\r\nimport { App } from './entry/App';\r\nimport { createHashHistory } from 'history';\r\nimport configureStore from './configureStore';\r\nimport { Provider } from 'react-redux';\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport './i18n';\r\n\r\nexport const history = createHashHistory();\r\n// @ts-ignore\r\nconst initialState = window.initialReduxState;\r\nconst store = configureStore(history, initialState);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <ConnectedRouter history={history}>\r\n      <App />\r\n    </ConnectedRouter>\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// For keyboard navigation\r\ndocument.body.addEventListener('mousedown', () => {\r\n  document.body.classList.add('using-mouse');\r\n});\r\n\r\ndocument.body.addEventListener('keydown', (event: KeyboardEvent) => {\r\n  if (event.key === 'Tab') {\r\n    document.body.classList.remove('using-mouse');\r\n  }\r\n});\r\n","import { routerMiddleware } from 'connected-react-router';\r\nimport { History } from 'history';\r\nimport { applyMiddleware, createStore, Store } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { createRootReducer, IApplicationState, rootSaga } from './store';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nexport default function configureStore(history: History, initialState: IApplicationState): Store<IApplicationState> {\r\n  const composeEnhancers = composeWithDevTools({});\r\n  const sagaMiddleware = createSagaMiddleware();\r\n\r\n  const store = createStore(\r\n    createRootReducer(history),\r\n    initialState,\r\n    composeEnhancers(applyMiddleware(routerMiddleware(history), sagaMiddleware)),\r\n  );\r\n\r\n  sagaMiddleware.run(rootSaga);\r\n\r\n  return store;\r\n}\r\n","import { IApplicationState } from '../index';\r\n\r\nexport const getFromAccount = (state: IApplicationState) => state.exchange.fromAccount;\r\nexport const getFromValue = (state: IApplicationState) => state.exchange.fromValue;\r\nexport const getToAccount = (state: IApplicationState) => state.exchange.toAccount;\r\nexport const getToValue = (state: IApplicationState) => state.exchange.toValue;\r\nexport const getBaseAccount = (state: IApplicationState) => state.exchange.baseAccount;\r\n\r\nconst formatValue = (value: number) =>\r\n  new Intl.NumberFormat('en', {\r\n    useGrouping: true,\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 2,\r\n  }).format(value);\r\n\r\nexport const getFormattedFromValue = (state: IApplicationState) => {\r\n  const fromValue = getFromValue(state);\r\n  return formatValue(fromValue);\r\n};\r\n\r\nexport const getFormattedToValue = (state: IApplicationState) => {\r\n  const toValue = getToValue(state);\r\n  return formatValue(toValue);\r\n};\r\n","export interface IAccountsState {\r\n  list: IAccount[];\r\n  baseCurrency: string;\r\n  viewMode: 'grid' | 'table';\r\n}\r\n\r\nexport interface IAccount {\r\n  id: string;\r\n  title: string;\r\n  currency: string;\r\n  value: number;\r\n}\r\n\r\nexport enum AccountsActionsTypes {\r\n  SET_GRID_VIEW_MODE = '@@accounts/SET_GRID_VIEW_MODE',\r\n  SET_TABLE_VIEW_MODE = '@@accounts/SET_TABLE_VIEW_MODE',\r\n  SET_BASE_CURRENCY = '@@accounts/SET_BASE_CURRENCY',\r\n  SET_ACCOUNT_VALUE = '@@accounts/SET_ACCOUNT_VALUE',\r\n}\r\n","import { IRates } from '../store/rates/types';\n\nexport const convertBetweenCurrencies = (\n  fromCurrency: string,\n  fromValue: number,\n  toCurrency: string,\n  rates: IRates,\n) => {\n  const baseValueInDollars = fromValue / rates[fromCurrency];\n  return baseValueInDollars * rates[toCurrency];\n};\n","export enum Routes {\n  HOME = '/',\n  ACCOUNTS = '/accounts',\n  TRANSACTIONS = '/accounts/transactions',\n  CARDS = '/cards',\n  EXCHANGE = '/exchange',\n  TOP_UP = '/top-up',\n  SEND = '/send',\n}\n","import { action } from 'typesafe-actions';\r\nimport { AccountsActionsTypes } from './types';\r\n\r\nexport const setGridViewMode = () => action(AccountsActionsTypes.SET_GRID_VIEW_MODE);\r\nexport const setTableViewMode = () => action(AccountsActionsTypes.SET_TABLE_VIEW_MODE);\r\nexport const setBaseCurrency = (baseCurrency: string) => action(AccountsActionsTypes.SET_BASE_CURRENCY, baseCurrency);\r\nexport const setAccountValue = (accountId: string, value: number) =>\r\n  action(AccountsActionsTypes.SET_ACCOUNT_VALUE, { accountId, value });\r\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import React from 'react';\nimport { Wrapper } from './SuspenseFallback.styles';\nimport { FiRadio } from 'react-icons/fi';\n\nconst SuspenseFallback = () => (\n  <Wrapper>\n    <FiRadio size={32} color={'rgba(0, 0, 0, 0.3)'} />\n  </Wrapper>\n);\n\nexport default SuspenseFallback;\n","import SuspenseFallback from './SuspenseFallback';\n\nexport { SuspenseFallback };\n","import { IAccount } from '../accounts/types';\r\n\r\nexport interface IExchangeState {\r\n  fromAccount: IAccount | null;\r\n  fromValue: number;\r\n  toAccount: IAccount | null;\r\n  toValue: number;\r\n  baseAccount: IAccount | null;\r\n  comment: string;\r\n  isExchangeModalVisible: boolean;\r\n  hasExchanged: boolean;\r\n}\r\n\r\nexport enum ExchangeActionTypes {\r\n  REVERSE = '@@exchange/REVERSE',\r\n  SET_BASE_ACCOUNT = '@@exchange/SET_BASE_ACCOUNT',\r\n  CHANGE_FROM_ACCOUNT = '@@exchange/CHANGE_FROM_ACCOUNT',\r\n  CHANGE_TO_ACCOUNT = '@@exchange/CHANGE_TO_ACCOUNT',\r\n  SET_FROM_ACCOUNT = '@@exchange/SET_FROM_ACCOUNT',\r\n  SET_TO_ACCOUNT = '@@exchange/SET_TO_ACCOUNT',\r\n  CHANGE_FROM_VALUE = '@@exchange/CHANGE_FROM_VALUE',\r\n  CHANGE_TO_VALUE = '@@exchange/CHANGE_TO_VALUE',\r\n  SET_FROM_VALUE = '@@exchange/SET_FROM_VALUE',\r\n  SET_TO_VALUE = '@@exchange/SET_TO_VALUE',\r\n  UPDATE_VALUES = '@@exchange/UPDATE_VALUES',\r\n  SET_COMMENT = '@@exchange/SET_COMMENT',\r\n  EXCHANGE = '@@exchange/EXCHANGE',\r\n  SET_EXCHANGE_MODAL_VISIBILITY = '@@exchange/SET_EXCHANGE_MODAL_VISIBILITY',\r\n  SET_HAS_EXCHANGED = '@@exchange/SET_HAS_EXCHANGED',\r\n  CLEAR_EXCHANGE = '@@exchange/CLEAR_EXCHANGE',\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/user.c1fc5ca7.jpeg\";","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport en from './translations/en.json';\nimport ru from './translations/ru.json';\n\nconst resources = {\n  en: {\n    translation: {\n      ...en,\n    },\n  },\n  ru: {\n    translation: {\n      ...ru,\n    },\n  },\n};\n\ni18n.use(initReactI18next).init({\n  resources,\n  lng: 'ru',\n  keySeparator: false,\n  interpolation: {\n    escapeValue: false,\n  },\n});\n\nexport { i18n };\n"],"sourceRoot":""}