{"version":3,"sources":["components/Dropdown/Dropdown.tsx","components/Select/Select.styles.ts","components/Select/BaseItem/BaseItem.styles.ts","components/Select/BaseItem/BaseItem.tsx","components/Select/TextItem/TextItem.styles.ts","components/Select/TextItem/TextItem.tsx","components/Select/Select.tsx","components/Select/index.ts"],"names":["Dropdown","elementRef","targetRef","handleClick","event","current","contains","target","props","onClickOutside","renderElement","ref","isOpened","content","renderTarget","children","this","document","addEventListener","removeEventListener","attachment","React","Component","slideIn","keyframes","Wrapper","styled","div","width","BaseItem","onClick","item","renderContent","PureComponent","Text","TextItem","text","Select"],"mappings":"+MA4DeA,E,2MAhDbC,WAAkD,K,EAClDC,UAAiD,K,EAUjDC,YAAc,SAACC,GACT,EAAKF,WAAa,EAAKA,UAAUG,SAAW,EAAKH,UAAUG,QAAQC,SAASF,EAAMG,SAIlF,EAAKN,YAAc,EAAKA,WAAWI,SAAW,EAAKJ,WAAWI,QAAQC,SAASF,EAAMG,SAIrF,EAAKC,MAAMC,gBACb,EAAKD,MAAMC,kB,EAIfC,cAAgB,SAACC,GACf,OAAK,EAAKH,MAAMI,UAIhB,EAAKX,WAAaU,EACX,EAAKH,MAAMK,QAAQF,IAJjB,M,EAOXG,aAAe,SAACH,GAEd,OADA,EAAKT,UAAYS,EACV,EAAKH,MAAMO,SAASJ,I,oFAhCvBK,KAAKR,MAAMI,SACbK,SAASC,iBAAiB,QAASF,KAAKb,aAExCc,SAASE,oBAAoB,QAASH,KAAKb,e,+BAgCrC,IAAD,EAC+Ba,KAAKR,MAAnCY,kBADD,MACc,aADd,EAGP,OACE,kBAAC,IAAD,CAAiBA,WAAYA,EAAYN,aAAcE,KAAKF,aAAcJ,cAAeM,KAAKN,oB,GA5C7EW,IAAMC,W,0dCT7B,IAAMC,EAAUC,YAAH,KAYAC,EAAUC,IAAOC,IAAV,KAET,SAAAnB,GAAK,OAAIA,EAAMoB,QAGXL,G,uPCjBR,IAAME,EAAUC,IAAOC,IAAV,KCmBLE,E,2MAXbC,QAAU,WACR,EAAKtB,MAAMsB,QAAQ,EAAKtB,MAAMuB,O,wEAGtB,IAAD,EACyBf,KAAKR,MAA7BuB,EADD,EACCA,KAAMC,EADP,EACOA,cAEd,OAAO,kBAAC,EAAD,CAASF,QAASd,KAAKc,SAAUE,EAAcD,Q,GARhCV,IAAMY,e,2GCPzB,IAAMC,EAAOR,IAAOC,IAAV,KCWFQ,EAJ4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMN,EAAT,EAASA,QAAT,OACzC,kBAAC,EAAD,CAAUC,KAAMK,EAAMN,QAASA,EAASE,cAAe,SAAAD,GAAI,OAAI,kBAACG,EAAD,KAAOH,OCIlEM,E,2MAGJL,cAAgB,SAACrB,GAAc,IAAD,EACK,EAAKH,MAA9BK,EADoB,EACpBA,QADoB,IACXe,aADW,MACH,IADG,EAG5B,OACE,kBAACH,EAAD,CAASd,IAAKA,EAAKiB,MAAOA,GACvBf,M,wEAKG,IAAD,EACkDG,KAAKR,MAAtDI,EADD,EACCA,SAAUG,EADX,EACWA,SAAUN,EADrB,EACqBA,eAAmBD,EADxC,wDAGP,OACE,kBAAC,EAAD,iBAAcA,EAAd,CAAqBI,SAAUA,EAAUC,QAASG,KAAKgB,cAAevB,eAAgBA,KACnF,SAAAE,GAAG,OAAII,EAASJ,U,GAlBJU,IAAMC,WAArBe,EACGF,SAAWA,EAuBLE,QCtCf","file":"static/js/9.6d2c53a0.chunk.js","sourcesContent":["import React from 'react';\r\nimport TetherComponent from 'react-tether';\r\n\r\ninterface IDropdownProps {\r\n  isOpened: boolean;\r\n  children: (ref: React.RefObject<HTMLElement>) => React.ReactNode;\r\n  content: (ref: React.RefObject<HTMLElement>) => React.ReactNode;\r\n  onClickOutside?: () => void;\r\n  attachment?: string;\r\n}\r\n\r\nclass Dropdown extends React.Component<IDropdownProps> {\r\n  elementRef: React.RefObject<HTMLElement> | null = null;\r\n  targetRef: React.RefObject<HTMLElement> | null = null;\r\n\r\n  componentDidUpdate(): void {\r\n    if (this.props.isOpened) {\r\n      document.addEventListener('click', this.handleClick);\r\n    } else {\r\n      document.removeEventListener('click', this.handleClick);\r\n    }\r\n  }\r\n\r\n  handleClick = (event: MouseEvent) => {\r\n    if (this.targetRef && this.targetRef.current && this.targetRef.current.contains(event.target as any)) {\r\n      return;\r\n    }\r\n\r\n    if (this.elementRef && this.elementRef.current && this.elementRef.current.contains(event.target as any)) {\r\n      return;\r\n    }\r\n\r\n    if (this.props.onClickOutside) {\r\n      this.props.onClickOutside();\r\n    }\r\n  };\r\n\r\n  renderElement = (ref: any) => {\r\n    if (!this.props.isOpened) {\r\n      return null;\r\n    }\r\n\r\n    this.elementRef = ref;\r\n    return this.props.content(ref);\r\n  };\r\n\r\n  renderTarget = (ref: any) => {\r\n    this.targetRef = ref;\r\n    return this.props.children(ref);\r\n  };\r\n\r\n  render() {\r\n    const { attachment = 'top center' } = this.props;\r\n\r\n    return (\r\n      <TetherComponent attachment={attachment} renderTarget={this.renderTarget} renderElement={this.renderElement} />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dropdown;\r\n","import styled, { keyframes } from 'styled-components';\r\n\r\nconst slideIn = keyframes`\r\n  0% {\r\n    opacity: 0;\r\n    transform: translateY(25%);\r\n  }\r\n  \r\n  100% {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div<{ width: number }>`\r\n  margin-top: 8px;\r\n  width: ${props => props.width}px;\r\n  background-color: #fff;\r\n  box-shadow: 0 0 10px -2px rgba(0, 0, 0, 0.3);\r\n  animation: ${slideIn} 0.2s ease;\r\n  border-radius: 6px;\r\n  overflow: hidden;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  padding: 20px 10px;\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  background-color: #fff;\r\n\r\n  &:hover {\r\n    background-color: rgba(0, 0, 0, 0.05);\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { Wrapper } from './BaseItem.styles';\r\n\r\ninterface IBaseItemProps<T> {\r\n  item: T;\r\n  renderContent: (item: T) => React.ReactNode;\r\n  onClick: (item: T) => void;\r\n}\r\n\r\nclass BaseItem<T> extends React.PureComponent<IBaseItemProps<T>> {\r\n  onClick = () => {\r\n    this.props.onClick(this.props.item);\r\n  };\r\n\r\n  render() {\r\n    const { item, renderContent } = this.props;\r\n\r\n    return <Wrapper onClick={this.onClick}>{renderContent(item)}</Wrapper>;\r\n  }\r\n}\r\n\r\nexport default BaseItem;\r\n","import styled from 'styled-components';\r\n\r\nexport const Text = styled.div`\r\n  font-size: 14px;\r\n  color: #000;\r\n`;\r\n","import React from 'react';\r\nimport { BaseItem } from '../BaseItem';\r\nimport { Text } from './TextItem.styles';\r\n\r\ninterface ITextItemProps {\r\n  text: string;\r\n  onClick: (text: string) => void;\r\n}\r\n\r\nconst TextItem: React.FC<ITextItemProps> = ({ text, onClick }) => (\r\n  <BaseItem item={text} onClick={onClick} renderContent={item => <Text>{item}</Text>} />\r\n);\r\n\r\nexport default TextItem;\r\n","import React from 'react';\r\nimport { Dropdown } from '../Dropdown';\r\nimport { Wrapper } from './Select.styles';\r\nimport { TextItem } from './TextItem';\r\n\r\ntype TDropdownProps = React.ComponentProps<typeof Dropdown>;\r\n\r\ninterface ISelectProps {\r\n  content: () => React.ReactNode;\r\n  width?: number;\r\n}\r\n\r\ntype TProps = ISelectProps & TDropdownProps;\r\n\r\nclass Select extends React.Component<TProps> {\r\n  static TextItem = TextItem;\r\n\r\n  renderContent = (ref: any) => {\r\n    const { content, width = 100 } = this.props;\r\n\r\n    return (\r\n      <Wrapper ref={ref} width={width}>\r\n        {content()}\r\n      </Wrapper>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { isOpened, children, onClickOutside, ...props } = this.props;\r\n\r\n    return (\r\n      <Dropdown {...props} isOpened={isOpened} content={this.renderContent} onClickOutside={onClickOutside}>\r\n        {ref => children(ref)}\r\n      </Dropdown>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Select;\r\n","import Select from './Select';\r\n\r\nexport { Select };\r\n"],"sourceRoot":""}